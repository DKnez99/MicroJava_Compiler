INFO  10:14:23,077 - Compiling source file: E:\Faculty\PP1\Projekat\Tutorijali\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\test301.mj
INFO  10:14:23,077 - =====================================
INFO  10:14:23,077 - PARSING...
INFO  10:14:23,107 - #2 program
INFO  10:14:23,107 - #47 test301
INFO  10:14:23,107 - #3 const
INFO  10:14:23,107 - #47 bool
INFO  10:14:23,107 - #47 tacno
INFO  10:14:23,108 - #30 =
INFO  10:14:23,108 - #50 true
INFO  10:14:23,108 - #26 ;
INFO  10:14:23,108 - #47 char
INFO  10:14:23,109 - #47 c
INFO  10:14:23,109 - #26 ;
INFO  10:14:23,110 - #47 int
INFO  10:14:23,110 - #47 y
INFO  10:14:23,110 - #26 ;
INFO  10:14:23,110 - #20 {
INFO  10:14:23,110 - #15 void
INFO  10:14:23,111 - #47 main
INFO  10:14:23,112 - #24 (
INFO  10:14:23,112 - #25 )
INFO  10:14:23,112 - #47 bool
INFO  10:14:23,113 - #47 netacno
INFO  10:14:23,113 - #26 ;
INFO  10:14:23,113 - #47 int
INFO  10:14:23,113 - #47 x
INFO  10:14:23,113 - #27 ,
INFO  10:14:23,113 - #47 y
INFO  10:14:23,113 - #26 ;
INFO  10:14:23,113 - #47 char
INFO  10:14:23,113 - #47 c
INFO  10:14:23,113 - #26 ;
INFO  10:14:23,113 - #20 {
INFO  10:14:23,113 - #13 print
INFO  10:14:23,114 - #24 (
INFO  10:14:23,114 - #47 tacno
INFO  10:14:23,114 - #25 )
INFO  10:14:23,115 - #26 ;
INFO  10:14:23,115 - #11 return
INFO  10:14:23,115 - #26 ;
INFO  10:14:23,116 - #12 read
INFO  10:14:23,116 - #24 (
INFO  10:14:23,116 - #47 netacno
INFO  10:14:23,116 - #25 )
INFO  10:14:23,116 - #26 ;
INFO  10:14:23,116 - #21 }
INFO  10:14:23,116 - #21 }
INFO  10:14:23,118 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  ProgramDeclList(
    ProgramDeclList(
      ProgramDeclList(
        EmptyProgramDeclList(
        ) [EmptyProgramDeclList]
        ProgramDeclConst(
          ConstDecl(
            ConstType(
              Type(
               bool
              ) [Type]
            ) [ConstType]
            ConstListSingle(
              ConstAssignBool(
               tacno
               true
              ) [ConstAssignBool]
            ) [ConstListSingle]
          ) [ConstDecl]
        ) [ProgramDeclConst]
      ) [ProgramDeclList]
      ProgramDeclVar(
        VarDecl(
          VarType(
            Type(
             char
            ) [Type]
          ) [VarType]
          VarListSingle(
            VarSingle(
             c
            ) [VarSingle]
          ) [VarListSingle]
        ) [VarDecl]
      ) [ProgramDeclVar]
    ) [ProgramDeclList]
    ProgramDeclVar(
      VarDecl(
        VarType(
          Type(
           int
          ) [Type]
        ) [VarType]
        VarListSingle(
          VarSingle(
           y
          ) [VarSingle]
        ) [VarListSingle]
      ) [VarDecl]
    ) [ProgramDeclVar]
  ) [ProgramDeclList]
  MethodDeclList(
    EmptyMethodDeclList(
    ) [EmptyMethodDeclList]
    MethodDecl(
      MethodReturnTypeVoid(
      ) [MethodReturnTypeVoid]
      MethodName(
       main
      ) [MethodName]
      FormParsNo(
      ) [FormParsNo]
      VarDeclList(
        VarDeclList(
          VarDeclList(
            EmptyVarDeclListNullable(
            ) [EmptyVarDeclListNullable]
            VarDecl(
              VarType(
                Type(
                 bool
                ) [Type]
              ) [VarType]
              VarListSingle(
                VarSingle(
                 netacno
                ) [VarSingle]
              ) [VarListSingle]
            ) [VarDecl]
          ) [VarDeclList]
          VarDecl(
            VarType(
              Type(
               int
              ) [Type]
            ) [VarType]
            VarListMany(
              VarListSingle(
                VarSingle(
                 x
                ) [VarSingle]
              ) [VarListSingle]
              VarSingle(
               y
              ) [VarSingle]
            ) [VarListMany]
          ) [VarDecl]
        ) [VarDeclList]
        VarDecl(
          VarType(
            Type(
             char
            ) [Type]
          ) [VarType]
          VarListSingle(
            VarSingle(
             c
            ) [VarSingle]
          ) [VarListSingle]
        ) [VarDecl]
      ) [VarDeclList]
      StatementList(
        StatementList(
          StatementList(
            EmptyStatementList(
            ) [EmptyStatementList]
            StatementSingle(
              SingleStatementPrint(
                ExprTerm(
                  Term(
                    FactorDesignator(
                      DesignatorDefault(
                       tacno
                      ) [DesignatorDefault]
                    ) [FactorDesignator]
                    EmptyMulopFactorList(
                    ) [EmptyMulopFactorList]
                  ) [Term]
                  EmptyAddopTermList(
                  ) [EmptyAddopTermList]
                ) [ExprTerm]
              ) [SingleStatementPrint]
            ) [StatementSingle]
          ) [StatementList]
          StatementSingle(
            SingleStatementReturn(
              ExprNo(
              ) [ExprNo]
            ) [SingleStatementReturn]
          ) [StatementSingle]
        ) [StatementList]
        StatementSingle(
          SingleStatementRead(
            DesignatorDefault(
             netacno
            ) [DesignatorDefault]
          ) [SingleStatementRead]
        ) [StatementSingle]
      ) [StatementList]
    ) [MethodDecl]
  ) [MethodDeclList]
) [Program]
INFO  10:14:23,118 - PARSING SUCCESSFUL!
INFO  10:14:23,118 - =====================================
INFO  10:14:23,118 - SEMANTIC ANALYSIS...
INFO  10:14:23,132 - Info at line 4: Created new constant bool tacno. ObjNode[Name = tacno, Type = bool, Kind = constant, Value = 1, Level = 0]
INFO  10:14:23,132 - Info at line 5: Created new variable char c. ObjNode[Name = c, Type = char, Kind = variable, Address = 0, Level = 0]
INFO  10:14:23,132 - Info at line 6: Created new variable int y. ObjNode[Name = y, Type = int, Kind = variable, Address = 1, Level = 0]
INFO  10:14:23,132 - Info at line 8: Entering method void main.
INFO  10:14:23,132 - Info at line 9: Created new variable bool netacno. ObjNode[Name = netacno, Type = bool, Kind = variable, Address = 0, Level = 1]
INFO  10:14:23,132 - Info at line 10: Created new variable int x. ObjNode[Name = x, Type = int, Kind = variable, Address = 1, Level = 1]
INFO  10:14:23,132 - Info at line 10: Created new variable int y. ObjNode[Name = y, Type = int, Kind = variable, Address = 2, Level = 1]
INFO  10:14:23,132 - Info at line 11: Created new variable char c. ObjNode[Name = c, Type = char, Kind = variable, Address = 3, Level = 1]
INFO  10:14:23,133 - Info at line 13: Accessed a constant bool tacno.
INFO  10:14:23,133 - Info at line 15: Accessed a variable bool netacno.
INFO  10:14:23,133 - SEMANTIC ANALYSIS SUCCESSFUL!
INFO  10:14:23,133 - =====================================
INFO  10:14:23,133 - CODE GENERATION...
INFO  10:14:23,136 - CODE GENERATION SUCCESSFUL!
INFO  10:14:23,136 - Results saved in the output file test\test301.obj.

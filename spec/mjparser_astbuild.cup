package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    //redefined methods for error reporting (changed error message)
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal syntax error! Parsing stopped", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* =========================================================================== */
/* =========================================================================== */
/* =========================================================================== */
/* terminals */

terminal PROG, CONST, EXTENDS, IF, ELSE, DO, WHILE, BREAK, CONTINUE, RETURN, READ, PRINT,  NEW, VOID, CLASS, THIS, ENUM, SUPER;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;
terminal SEMI, COMMA, COLON, DOT;
terminal ASSIGN;
terminal IS_EQUAL, NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL;
terminal INC, DEC;
terminal PLUS, MINUS, MUL, DIV, MOD, QQ; 
terminal OR, AND;
terminal String IDENT;
terminal Integer NUMBER_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

/* =========================================================================== */
/* nonterminals */

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program,
			ProgramName;

nonterminal ProgramDeclListNullable ProgramDeclListNullable;
nonterminal
			ProgramDecl ProgramDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
	
nonterminal ConstDecl ConstDecl;
nonterminal ConstType ConstType;
nonterminal ConstAssignList ConstAssignList;
nonterminal ConstAssign ConstAssign;
nonterminal ConstName ConstName;
			
nonterminal Var Var;
nonterminal
			VarDecl VarDecl;
nonterminal
			VarType VarType;
nonterminal
			VarList VarList;
nonterminal
			VarDeclListNullable VarDeclListNullable;
			
nonterminal ClassDecl ClassDecl;
nonterminal ClassName ClassName;
nonterminal ClassExtendsOptional ClassExtendsOptional;
nonterminal ClassBody ClassBody;
nonterminal ClassParentType ClassParentType;
nonterminal ClassBodyMethodsOptional ClassBodyMethodsOptional;
nonterminal MethodDecl MethodDecl;
nonterminal MethodReturnType MethodReturnType;
nonterminal MethodName MethodName;
nonterminal MethodDeclListNullable MethodDeclListNullable;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;
nonterminal FormParType FormParType;
nonterminal FormParName FormParName;
nonterminal FormParsOptional FormParsOptional;

nonterminal Statement Statement;
nonterminal StatementListNullable StatementListNullable;
nonterminal SingleStatement SingleStatement;
nonterminal SingleStatementElseOptional SingleStatementElseOptional;
nonterminal SingleStatementPrintNumConstOptional SingleStatementPrintNumConstOptional;
nonterminal Statements Statements;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal ActParsOptional ActParsOptional;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal ExprOptional ExprOptional;
nonterminal RelopExprOptional RelopExprOptional;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Term,
			AddopTermListNullable;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor,
			MulopFactorListNullable;

nonterminal FactorType FactorType;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

/* =========================================================================== */
/* precedences */

precedence left ELSE;

/* =========================================================================== */
/* Program */

Program ::= (Program) PROG ProgramName:p ProgramDeclListNullable:P1 LBRACE MethodDeclListNullable:M2 RBRACE {: RESULT=new Program(p, P1, M2); RESULT.setLine(pleft); :};

ProgramName ::= (ProgramName) IDENT:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};

ProgramDeclListNullable ::=
					(ProgramDeclList) ProgramDeclListNullable:P1 ProgramDecl:P2 {: RESULT=new ProgramDeclList(P1, P2); RESULT.setLine(P1left); :}
				|
					(EmptyProgramDeclList) {: RESULT=new EmptyProgramDeclList(); :} /* epsilon */
				;
				
ProgramDecl ::=
					(ProgramDeclConst) ConstDecl:C1 {: RESULT=new ProgramDeclConst(C1); RESULT.setLine(C1left); :}
				|
					(ProgramDeclVar) VarDecl:V1 {: RESULT=new ProgramDeclVar(V1); RESULT.setLine(V1left); :}
				|
					(ProgramDeclClass) ClassDecl:C1 {: RESULT=new ProgramDeclClass(C1); RESULT.setLine(C1left); :}
				;
				
/* =========================================================================== */
/* ConstDecl */

ConstDecl ::= (ConstDecl) CONST ConstType:C1 ConstAssignList:C2 SEMI {: RESULT=new ConstDecl(C1, C2); RESULT.setLine(C1left); :};

ConstType ::= (ConstType) Type:constType {: RESULT=new ConstType(constType); RESULT.setLine(constTypeleft); :};

ConstAssignList ::=
					(ConstListSingle) ConstAssign:C1 {: RESULT=new ConstListSingle(C1); RESULT.setLine(C1left); :}
				|
					(ConstListMany) ConstAssignList:C1 COMMA ConstAssign:C2 {: RESULT=new ConstListMany(C1, C2); RESULT.setLine(C1left); :}
				;

ConstAssign ::=
					(ConstAssignNum) IDENT:constName ASSIGN NUMBER_CONST:numberValue {: RESULT=new ConstAssignNum(constName, numberValue); RESULT.setLine(constNameleft); :}
				|
					(ConstAssignChar) IDENT:constName ASSIGN CHAR_CONST:charValue {: RESULT=new ConstAssignChar(constName, charValue); RESULT.setLine(constNameleft); :}
				|
					(ConstAssignBool) IDENT:constName ASSIGN BOOL_CONST:boolValue {: RESULT=new ConstAssignBool(constName, boolValue); RESULT.setLine(constNameleft); :}
				;

/* =========================================================================== */
/* VarDecl */

VarDecl ::= (VarDecl) VarType:V1 VarList:V2 SEMI {: RESULT=new VarDecl(V1, V2); RESULT.setLine(V1left); :};

VarType ::= (VarType) Type:varType {: RESULT=new VarType(varType); RESULT.setLine(varTypeleft); :};

VarList ::=
				(VarListSingle) Var:V1 {: RESULT=new VarListSingle(V1); RESULT.setLine(V1left); :}
			|
				(VarListMany) VarList:V1 COMMA Var:V2 {: RESULT=new VarListMany(V1, V2); RESULT.setLine(V1left); :}
			;	
				
Var ::=
			(VarSingle) IDENT:varName {: RESULT=new VarSingle(varName); RESULT.setLine(varNameleft); :}
		|		
			(VarArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarArray(varName); RESULT.setLine(varNameleft); :}
		|
			(VarError) error:l
			{: parser.report_error("Error recovery (level A) in variable declaration at line "+lleft+". Recovered to the next , or ;", null); :} {: RESULT=new VarError(); :}
		;

VarDeclListNullable ::=
					(VarDeclList) VarDeclListNullable:V1 VarDecl:V2 {: RESULT=new VarDeclList(V1, V2); RESULT.setLine(V1left); :}
				|
					(EmptyVarDeclListNullable) {: RESULT=new EmptyVarDeclListNullable(); :} /* epsilon */
				;

/* =========================================================================== */
/* ClassDecl */

ClassDecl ::= (ClassDecl) CLASS ClassName:C1 ClassExtendsOptional:C2 LBRACE ClassBody:C3 RBRACE {: RESULT=new ClassDecl(C1, C2, C3); RESULT.setLine(C1left); :};

ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ClassExtendsOptional ::= 
							(ClassExtendsYes) EXTENDS ClassParentType:C1 {: RESULT=new ClassExtendsYes(C1); RESULT.setLine(C1left); :}
						|
							(ClassExtendsNo) {: RESULT=new ClassExtendsNo(); :} /* epsilon */
						;

ClassParentType ::= (ClassParentType) Type:classParentType {: RESULT=new ClassParentType(classParentType); RESULT.setLine(classParentTypeleft); :};

ClassBody ::= (ClassBody) VarDeclListNullable:V1 ClassBodyMethodsOptional:C2 {: RESULT=new ClassBody(V1, C2); RESULT.setLine(V1left); :};

ClassBodyMethodsOptional ::=
								(ClassBodyMethodsYes) LBRACE MethodDeclListNullable:M1 RBRACE {: RESULT=new ClassBodyMethodsYes(M1); RESULT.setLine(M1left); :}
							|
								(ClassBodyMethodsNo) {: RESULT=new ClassBodyMethodsNo(); :} /* epsilon */
							;
							
/* =========================================================================== */
/* MethodDecl */
			
MethodDecl ::= (MethodDecl) MethodReturnType:M1 MethodName:M2 LPAREN FormParsOptional:F3 RPAREN VarDeclListNullable:V4 LBRACE StatementListNullable:S5 RBRACE {: RESULT=new MethodDecl(M1, M2, F3, V4, S5); RESULT.setLine(M1left); :};

MethodReturnType ::=
						(MethodReturnTypeRegular) Type:methodReturnType {: RESULT=new MethodReturnTypeRegular(methodReturnType); RESULT.setLine(methodReturnTypeleft); :}
					|
						(MethodReturnTypeVoid) VOID {: RESULT=new MethodReturnTypeVoid(); :}
					;
					
MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};

MethodDeclListNullable ::=
							(MethodDeclList) MethodDeclListNullable:M1 MethodDecl:M2 {: RESULT=new MethodDeclList(M1, M2); RESULT.setLine(M1left); :}
						|
							(EmptyMethodDeclList) {: RESULT=new EmptyMethodDeclList(); :} /* epsilon */
						;			
							
/* =========================================================================== */
/* FormPars */	

FormPars ::=
				(FormParsSingle) FormPar:F1 {: RESULT=new FormParsSingle(F1); RESULT.setLine(F1left); :}
			|
				(FormParsMany) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormParsMany(F1, F2); RESULT.setLine(F1left); :}
			; 

FormPar ::=
				(FormParSingle) FormParType:F1 FormParName:F2 {: RESULT=new FormParSingle(F1, F2); RESULT.setLine(F1left); :}
			|
				(FormParArray) FormParType:F1 FormParName:F2 LBRACKET RBRACKET {: RESULT=new FormParArray(F1, F2); RESULT.setLine(F1left); :}
			|
				(FormParError) error:l
				{: parser.report_error("Error recovery (level B) in formal parameters at line "+lleft+". Recovered to the next , or )", null); :} {: RESULT=new FormParError(); :}
			;
			
FormParType ::= (FormParType) Type:formParType {: RESULT=new FormParType(formParType); RESULT.setLine(formParTypeleft); :};

FormParName ::= (FormParName) IDENT:formParName {: RESULT=new FormParName(formParName); RESULT.setLine(formParNameleft); :};

FormParsOptional ::= 
					(FormParsYes) FormPars:F1 {: RESULT=new FormParsYes(F1); RESULT.setLine(F1left); :}
				|
					(FormParsNo) {: RESULT=new FormParsNo(); :} /* epsilon */
				;
				
/* =========================================================================== */
/* Type */

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

/* =========================================================================== */
/* Statement */

Statement ::=
				(StatementLabeled) Label:L1 COLON SingleStatement:S2 {: RESULT=new StatementLabeled(L1, S2); RESULT.setLine(L1left); :}
			|
				(StatementSingle) SingleStatement:S1 {: RESULT=new StatementSingle(S1); RESULT.setLine(S1left); :}
			|
				(StatementBlock) Statements:S1 {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :}
			;
						
StatementListNullable ::=
							(StatementList) StatementListNullable:S1 Statement:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
						|
							(EmptyStatementList) {: RESULT=new EmptyStatementList(); :} /* epsilon */
						;

/* =========================================================================== */
/* SingleStatement */

SingleStatement ::=
					(SingleStatementDesignatorStatement) DesignatorStatement:D1 {: RESULT=new SingleStatementDesignatorStatement(D1); RESULT.setLine(D1left); :}
				|
					(SingleStatementIf) IF LPAREN Condition:C1 RPAREN Statement:S2 SingleStatementElseOptional:S3 {: RESULT=new SingleStatementIf(C1, S2, S3); RESULT.setLine(C1left); :}
				|
					(SingleStatementDo) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new SingleStatementDo(S1, C2); RESULT.setLine(S1left); :}
				|
					(SingleStatementBreak) BREAK SEMI {: RESULT=new SingleStatementBreak(); :}
				|
					(SingleStatementContinue) CONTINUE SEMI {: RESULT=new SingleStatementContinue(); :}
				|
					(SingleStatementReturn) RETURN ExprOptional:E1 SEMI {: RESULT=new SingleStatementReturn(E1); RESULT.setLine(E1left); :}
				|
					(SingleStatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new SingleStatementRead(D1); RESULT.setLine(D1left); :}
				|
					(SingleStatementPrint) PRINT LPAREN Expr:E1 SingleStatementPrintNumConstOptional:S2 RPAREN SEMI {: RESULT=new SingleStatementPrint(E1, S2); RESULT.setLine(E1left); :}
				;
				
SingleStatementElseOptional ::=
								(SingleStatementElseYes) ELSE Statement:S1 {: RESULT=new SingleStatementElseYes(S1); RESULT.setLine(S1left); :}
							|
								(SingleStatementElseNo) {: RESULT=new SingleStatementElseNo(); :} /* epsilon */
							;

SingleStatementPrintNumConstOptional ::=
											(SingleStatementPrintNumConstYes) COMMA NUMBER_CONST:printNumber {: RESULT=new SingleStatementPrintNumConstYes(printNumber); RESULT.setLine(printNumberleft); :}
										|
											(SingleStatementPrintNumConstNo) {: RESULT=new SingleStatementPrintNumConstNo(); :} /* epsilon */
										;

/* =========================================================================== */
/* Statements */

Statements ::= (Statements) LBRACE StatementListNullable:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};

/* =========================================================================== */
/* DesignatorStatement */

DesignatorStatement ::=
							(DesignatorStatementAssign) Designator:destination Assignop:A1 Expr:expr SEMI {: RESULT=new DesignatorStatementAssign(destination, A1, expr); RESULT.setLine(destinationleft); :}
						|
							(DesignatorStatementFunctionCall) Designator:functionName LPAREN ActParsOptional:A1 RPAREN SEMI {: RESULT=new DesignatorStatementFunctionCall(functionName, A1); RESULT.setLine(functionNameleft); :}
						|
							(DesignatorStatementPostInc) Designator:varName INC SEMI {: RESULT=new DesignatorStatementPostInc(varName); RESULT.setLine(varNameleft); :}
						|
							(DesignatorStatementPostDec) Designator:varName DEC SEMI {: RESULT=new DesignatorStatementPostDec(varName); RESULT.setLine(varNameleft); :}
						|
							(ErrorDesignatorStatementAssign) error SEMI:l
							{: parser.report_error("Error recovery (level A) in designator assignment at line "+lleft+". Recovered to the next ;", null); :} {: RESULT=new ErrorDesignatorStatementAssign(); :}
						;
						
/* =========================================================================== */
/* ActPars */

ActPars ::= 
			(ActParsSingle) Expr:E1 {: RESULT=new ActParsSingle(E1); RESULT.setLine(E1left); :}
		|
			(ActParsMany) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsMany(A1, E2); RESULT.setLine(A1left); :}
		;

ActParsOptional ::= 
						(ActParsYes) ActPars:A1 {: RESULT=new ActParsYes(A1); RESULT.setLine(A1left); :}
					|
						(ActParsNo) {: RESULT=new ActParsNo(); :}	/* epsilon */
					;

/* =========================================================================== */
/* Condition */

Condition ::=
				(ConditionSingle) CondTerm:C1 {: RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); :}
			|
				(ConditionMany) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionMany(C1, C2); RESULT.setLine(C1left); :}
			|
				(ConditionError) error:l
				{: parser.report_error("Error recovery (level B) in condition at line " + lleft + ". Recovered to the next )", null); :} {: RESULT=new ConditionError(); :}
			;

/* =========================================================================== */
/* CondTerm */

CondTerm ::=
				(CondTermSingle) CondFact:C1 {: RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); :}
			|
				(CondTermMany) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermMany(C1, C2); RESULT.setLine(C1left); :}
			;

/* =========================================================================== */
/* CondFact */

CondFact ::= (CondFact) Expr:E1 RelopExprOptional:R2 {: RESULT=new CondFact(E1, R2); RESULT.setLine(E1left); :};

/* =========================================================================== */
/* Expr */

Expr ::=
			(ExprTerm) Term:T1 AddopTermListNullable:A2 {: RESULT=new ExprTerm(T1, A2); RESULT.setLine(T1left); :}
		|
			(ExprNegTerm) MINUS Term:T1 AddopTermListNullable:A2 {: RESULT=new ExprNegTerm(T1, A2); RESULT.setLine(T1left); :}
		|
			(ExprQQ) Term:T1 AddopTermListNullable:A2 QQ Expr:E3 {: RESULT=new ExprQQ(T1, A2, E3); RESULT.setLine(T1left); :}
		|
			(ExprNegQQ) MINUS Term:T1 AddopTermListNullable:A2 QQ Expr:E3 {: RESULT=new ExprNegQQ(T1, A2, E3); RESULT.setLine(T1left); :}
		;
					
ExprOptional ::=
					(ExprYes) Expr:E1 {: RESULT=new ExprYes(E1); RESULT.setLine(E1left); :}
				|
					(ExprNo) {: RESULT=new ExprNo(); :} /* epsilon */
				;

RelopExprOptional ::=
						(RelopExprYes) Relop:R1 Expr:E2 {: RESULT=new RelopExprYes(R1, E2); RESULT.setLine(R1left); :}
					|
						(RelopExprNo) {: RESULT=new RelopExprNo(); :} /* epsilon */
					;

/* =========================================================================== */
/* Term */

Term ::= (Term) Factor:F1 MulopFactorListNullable:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :};

AddopTermListNullable ::=
							(AddopTermList) AddopTermListNullable:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermList(A1, A2, T3); RESULT.setLine(A1left); :}
						|
							(EmptyAddopTermList) {: RESULT=new EmptyAddopTermList(); :} /* epsilon */
						;

/* =========================================================================== */
/* Factor */

Factor ::=
				(FactorDesignator) Designator:designatorName {: RESULT=new FactorDesignator(designatorName); RESULT.setLine(designatorNameleft); :}
			|
				(FactorDesignatorMethod) Designator:methodName LPAREN ActParsOptional:actPars RPAREN {: RESULT=new FactorDesignatorMethod(methodName, actPars); RESULT.setLine(methodNameleft); :}
			|
				(FactorConstNum) NUMBER_CONST:numberValue {: RESULT=new FactorConstNum(numberValue); RESULT.setLine(numberValueleft); :}
			|
				(FactorConstChar) CHAR_CONST:charValue {: RESULT=new FactorConstChar(charValue); RESULT.setLine(charValueleft); :}
			|
				(FactorConstBool) BOOL_CONST:boolValue {: RESULT=new FactorConstBool(boolValue); RESULT.setLine(boolValueleft); :}
			|
				(FactorNewArray) NEW Type:elementType LBRACKET Expr:expr RBRACKET {: RESULT=new FactorNewArray(elementType, expr); RESULT.setLine(elementTypeleft); :}
			|
				(FactorNewUserType) NEW Type:userDefinedType {: RESULT=new FactorNewUserType(userDefinedType); RESULT.setLine(userDefinedTypeleft); :}
			|
				(FactorExpr) LPAREN Expr:expr RPAREN {: RESULT=new FactorExpr(expr); RESULT.setLine(exprleft); :}	
			;

MulopFactorListNullable ::=
								(MulopFactorList) MulopFactorListNullable:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorList(M1, M2, F3); RESULT.setLine(M1left); :}
							|
								(EmptyMulopFactorList) {: RESULT=new EmptyMulopFactorList(); :} /* epsilon */
							;		

/* =========================================================================== */
/* Designator */
			
Designator ::=	
					(DesignatorClassEntity) Designator:designatorEntity DOT IDENT:classField {: RESULT=new DesignatorClassEntity(designatorEntity, classField); RESULT.setLine(designatorEntityleft); :}
				|
					(DesignatorArray) Designator:designatorArray LBRACKET Expr:arrayIndex RBRACKET {: RESULT=new DesignatorArray(designatorArray, arrayIndex); RESULT.setLine(designatorArrayleft); :}
				|
					(DesignatorDefault) IDENT:designatorName {: RESULT=new DesignatorDefault(designatorName); RESULT.setLine(designatorNameleft); :}
				; 

/* =========================================================================== */
/* Label */
			
Label ::= (Label) IDENT:labelName {: RESULT=new Label(labelName); RESULT.setLine(labelNameleft); :};

/* =========================================================================== */
/* Assignop */

Assignop ::= (Assign) ASSIGN {: RESULT=new Assign(); :};

/* =========================================================================== */
/* Relop */

Relop ::= 
			(IsEqual) IS_EQUAL {: RESULT=new IsEqual(); :}
		|
			(NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		|
			(GreaterThan) GREATER {: RESULT=new GreaterThan(); :}
		|
			(GreaterOrEqualTo) GREATER_OR_EQUAL {: RESULT=new GreaterOrEqualTo(); :}
		|
			(LessThan) LESS {: RESULT=new LessThan(); :}
		|
			(LessOrEqualTo) LESS_OR_EQUAL {: RESULT=new LessOrEqualTo(); :}
		;

/* =========================================================================== */
/* Addop */

Addop ::=
			(Plus) PLUS {: RESULT=new Plus(); :}
		|
			(Minus) MINUS {: RESULT=new Minus(); :}
		;

/* =========================================================================== */
/* Mulop */

Mulop ::= 
			(Mul) MUL {: RESULT=new Mul(); :}
		|
			(Div) DIV {: RESULT=new Div(); :}
		|
			(Mod) MOD {: RESULT=new Mod(); :}
		;
		
/* =========================================================================== */